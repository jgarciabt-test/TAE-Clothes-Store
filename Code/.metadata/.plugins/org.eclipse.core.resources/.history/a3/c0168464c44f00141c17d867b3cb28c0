package com.tae.store.fragments;

import java.math.BigDecimal;
import java.util.ArrayList;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Vibrator;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.Button;
import android.widget.TextView;

import com.actionbarsherlock.app.SherlockListFragment;
import com.paypal.android.sdk.payments.PayPalItem;
import com.paypal.android.sdk.payments.PayPalPayment;
import com.paypal.android.sdk.payments.PayPalPaymentDetails;
import com.paypal.android.sdk.payments.PaymentActivity;
import com.tae.store.MainActivity;
import com.tae.store.R;
import com.tae.store.adapters.BagListAdapter;
import com.tae.store.helpers.DatabaseHandler;
import com.tae.store.model.Product;
import com.tae.store.utilities.PayPalUtil;
import com.tae.store.utilities.SPTags;

/**
 * Fragment that implements the bag feature. All the products displayed on this
 * fragment are obtained from the local database. This items can be deleted with
 * a long click, after a confirmation dialog.
 * 
 * @author Jose Garcia
 * @version 1.0
 * @since 2014-10-08
 */
public class BagFragment extends SherlockListFragment {

	/** TextView to display the number of products.  */
	private TextView qty;
	/** TextView to display the amount of all the products.  */
	private TextView total;
	/** TextView to display the total amount.  */
	private TextView total_order;
	/** TextView to display the shipping costs.  */
	private TextView shipping;
	/** Button to do the checkout.  */
	private Button btnCheckout;

	/** DatabaseHandler. */
	private DatabaseHandler BAG;
	/** ArrayList with all the Product objects. */
	private ArrayList<Product> myBag;
	/** BagListAdapter. */
	private BagListAdapter adapter;

	/** Int to determine the position of the object to be deleted. */
	private int position = -1;

	public BagFragment() {
		myBag = new ArrayList<Product>();
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {

		ViewGroup rootGroup = (ViewGroup) inflater.inflate(R.layout.fragment_bag, null, false);
		BAG = new DatabaseHandler(getActivity().getBaseContext());

		qty = (TextView) rootGroup.findViewById(R.id.txt_bag_qty);
		total_order = (TextView) rootGroup.findViewById(R.id.txt_bag_order);
		total = (TextView) rootGroup.findViewById(R.id.txt_bag_main_total);
		btnCheckout = (Button) rootGroup.findViewById(R.id.btn_checkout);
		shipping = (TextView) rootGroup.findViewById(R.id.txt_bag_shipping);

		btnCheckout.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				SharedPreferences preferences = getActivity().getPreferences(
						getActivity().MODE_PRIVATE);
				if (preferences.getBoolean(SPTags.LOGGED, false)) {
					if (!myBag.isEmpty()) {
						checkout();
					} else {
						AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
						builder.setMessage(
								getActivity().getResources().getString(R.string.bag_empty))
								.setCancelable(false)
								.setPositiveButton("OK", new DialogInterface.OnClickListener() {
									public void onClick(DialogInterface dialog, int id) {
									}
								});
						AlertDialog alert = builder.create();
						alert.show();
					}
				} else {
					AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
					builder.setMessage(getActivity().getResources().getString(R.string.not_logged))
							.setCancelable(false)
							.setPositiveButton("OK", new DialogInterface.OnClickListener() {
								public void onClick(DialogInterface dialog, int id) {
									MainActivity.replaceFragment(new MyTaeFragment(), "MY_TAE",
											true);
								}
							});
					AlertDialog alert = builder.create();
					alert.show();
				}

			}
		});
		if (savedInstanceState == null) {
			if (myBag.isEmpty()) {
				myBag = BAG.getBag();
			}
		} else {
			myBag = savedInstanceState.getParcelableArrayList("myBag");
		}

		adapter = new BagListAdapter(getActivity(), myBag);
		setListAdapter(adapter);
		updateSreen();

		return rootGroup;
	}

	@Override
	public void onViewCreated(View view, Bundle savedInstanceState) {
		super.onViewCreated(view, savedInstanceState);

		getListView().setOnItemLongClickListener(new OnItemLongClickListener() {

			@Override
			public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
				Vibrator vibrator = (Vibrator) getActivity().getSystemService(
						Context.VIBRATOR_SERVICE);
				vibrator.vibrate(200);
				BagFragment.this.position = position;
				new AlertDialog.Builder(getActivity()).setIcon(android.R.drawable.ic_dialog_alert)
						.setMessage(R.string.delete_dialog)
						.setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {
							@Override
							public void onClick(DialogInterface dialog, int which) {
								deleteProduct();
							}

						}).setNegativeButton(R.string.no, null).show();
				return false;
			}
		});

	}

	public void updateSreen() {
		qty.setText(String.valueOf(myBag.size()));
		float totalToPay = 0;
		for (int i = 0; i < myBag.size(); i++) {
			totalToPay += myBag.get(i).getPrice();
		}
		total_order.setText(getActivity().getResources().getString(R.string.pound_symbol)
				+ String.valueOf(totalToPay));
		shipping.setText(getActivity().getResources().getString(R.string.pound_symbol)
				+ PayPalUtil.SHIPPING);
		totalToPay += Float.parseFloat(PayPalUtil.SHIPPING);
		total.setText(getActivity().getResources().getString(R.string.pound_symbol)
				+ String.valueOf(totalToPay));

	}

	@Override
	public void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);

		outState.putParcelableArrayList("myBag", myBag);
	}

	public void deleteProduct() {
		BAG.deleteProduct(myBag.get(position).getId());
		myBag.remove(position);
		adapter.notifyDataSetChanged();
		updateSreen();
	}

	public void cleanScreen() {
		myBag.clear();
		adapter.notifyDataSetChanged();
		updateSreen();
	}

	private void checkout() {

		PayPalPayment thingToBuy = getStuffToBuy(PayPalPayment.PAYMENT_INTENT_SALE);

		Intent intent = new Intent(getActivity(), PaymentActivity.class);
		intent.putExtra(PaymentActivity.EXTRA_PAYMENT, thingToBuy);
		startActivityForResult(intent, PayPalUtil.REQUEST_CODE_PAYMENT);
	}

	private PayPalPayment getStuffToBuy(String paymentIntent) {
		PayPalItem[] items = new PayPalItem[myBag.size()];
		for (int i = 0; i < myBag.size(); i++) {
			items[i] = new PayPalItem(myBag.get(i).getName() + " SIZE:" + myBag.get(i).getSize(),
					1, new BigDecimal(String.valueOf(myBag.get(i).getPrice())),
					PayPalUtil.CURRENCY, "Ref Number: " + myBag.get(i).getId());
		}

		BigDecimal subtotal = PayPalItem.getItemTotal(items);
		BigDecimal shipping = new BigDecimal("7.21");
		BigDecimal tax = new BigDecimal("0.00");
		PayPalPaymentDetails paymentDetails = new PayPalPaymentDetails(shipping, subtotal, tax);
		BigDecimal amount = subtotal.add(shipping).add(tax);
		// TODO Parameters
		PayPalPayment payment = new PayPalPayment(amount, PayPalUtil.CURRENCY, "TAE Clothes Store",
				paymentIntent);
		return payment.items(items).paymentDetails(paymentDetails);
	}
}
