package com.tae.store.fragments;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.view.ViewPager;
import android.view.GestureDetector;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;

import com.actionbarsherlock.app.SherlockFragment;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.VolleyLog;
import com.android.volley.Response.Listener;
import com.android.volley.toolbox.JsonArrayRequest;
import com.tae.store.MainActivity;
import com.tae.store.R;
import com.tae.store.SplashScreen;
import com.tae.store.adapters.SlidePagerAdapter;
import com.tae.store.adapters.SlidePagerAdapterProduct;
import com.tae.store.app.AppController;
import com.tae.store.model.Category;
import com.tae.store.model.Product;
import com.tae.store.utilities.MainCategories;
import com.tae.store.utilities.ServerUrl;
import com.viewpagerindicator.CirclePageIndicator;
import com.viewpagerindicator.PageIndicator;

public class HomeFragment extends SherlockFragment {

	private Context context;
	private int currentSelectedFragmentPosition = 0;

	// Offers
	private PageIndicator mIndicatorOffers;
	private ViewPager mPagerOffers;
	// TODO customize
	private SlidePagerAdapterProduct mAdapterOffers;
	private ArrayList<Product> offers;

	// Men
	private PageIndicator mIndicatorMen;
	private ViewPager mPagerMen;
	private SlidePagerAdapter mAdapterMen;
	private ArrayList<Category> menCategories;

	// Women
	private PageIndicator mIndicatorWomen;
	private ViewPager mPagerWomen;
	private SlidePagerAdapter mAdapterWomen;
	private ArrayList<Category> womenCategories;

	// Gesture detector to determine with screen has been tapped
	final GestureDetector tapGestureDetectorOffer = new GestureDetector(
			getActivity(), new GestureDetector.SimpleOnGestureListener() {
				@Override
				public boolean onSingleTapConfirmed(MotionEvent e) {
					MainActivity.replaceFragment(new CategoryFragment("Men",
							context), "CATEGORY_FRAGMENT", true);
					return false;
				}
			});

	// Gesture detector to determine with screen has been tapped
	final GestureDetector tapGestureDetectorMen = new GestureDetector(
			getActivity(), new GestureDetector.SimpleOnGestureListener() {
				@Override
				public boolean onSingleTapConfirmed(MotionEvent e) {
					int i = mPagerMen.getCurrentItem();
					switch (i) {
					case 0:
						MainActivity.replaceFragment(new CategoryFragment(
								"Men", context), "CATEGORY_FRAGMENT", true);
						break;
					default:
						MainActivity.replaceFragment(new ProductListFragment(
								menCategories.get(i - 1).getId(), menCategories
										.get(i - 1).getName(), context),
								"PRODUCT_LIST_FRAGMENT", true);
						break;
					}

					return false;
				}
			});

	final GestureDetector tapGestureDetectorWomen = new GestureDetector(
			getActivity(), new GestureDetector.SimpleOnGestureListener() {
				@Override
				public boolean onSingleTapConfirmed(MotionEvent e) {
					int i = mPagerWomen.getCurrentItem();
					switch (i) {
					case 0:
						MainActivity.replaceFragment(new CategoryFragment(
								"Women", context), "CATEGORY_FRAGMENT", true);
						break;
					default:
						MainActivity.replaceFragment(new ProductListFragment(
								menCategories.get(i - 1).getId(), menCategories
										.get(i - 1).getName(), context),
								"PRODUCT_LIST_FRAGMENT", true);
						break;
					}

					return false;
				}
			});

	public HomeFragment() {
	}

	public HomeFragment(Context context, ArrayList<Category> menCategories,
			ArrayList<Category> womenCategories, ArrayList<Product> offers) {
		this.context = context;
		this.menCategories = menCategories;
		this.womenCategories = womenCategories;
		this.offers = offers;
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {

		ViewGroup rootView = (ViewGroup) inflater.inflate(
				R.layout.fragment_home, container, false);

		if (context == null) {
			context = getActivity();
		}

		if (savedInstanceState != null) {
			menCategories = savedInstanceState
					.getParcelableArrayList("menCategories");
			womenCategories = savedInstanceState
					.getParcelableArrayList("womenCategories");
			offers = savedInstanceState.getParcelableArrayList("offer");
		}
		if (menCategories == null) {

		}

		mAdapterOffers = new SlidePagerAdapterProduct(
				getChildFragmentManager(), offers);

		mPagerOffers = (ViewPager) rootView.findViewById(R.id.vp1);
		mPagerOffers.setAdapter(mAdapterOffers);

		mIndicatorOffers = (CirclePageIndicator) rootView
				.findViewById(R.id.indicator1);
		mIndicatorOffers.setViewPager(mPagerOffers);

		mAdapterMen = new SlidePagerAdapter(getChildFragmentManager(),
				MainCategories.MEN, menCategories);
		mPagerMen = (ViewPager) rootView.findViewById(R.id.vp2);
		mPagerMen.setAdapter(mAdapterMen);

		mIndicatorMen = (CirclePageIndicator) rootView
				.findViewById(R.id.indicator2);
		mIndicatorMen.setViewPager(mPagerMen);

		mAdapterWomen = new SlidePagerAdapter(getChildFragmentManager(),
				MainCategories.WOMEN, womenCategories);
		mPagerWomen = (ViewPager) rootView.findViewById(R.id.vp3);
		mPagerWomen.setAdapter(mAdapterWomen);

		mIndicatorWomen = (CirclePageIndicator) rootView
				.findViewById(R.id.indicator3);
		mIndicatorWomen.setViewPager(mPagerWomen);

		mPagerOffers.setOnTouchListener(new OnTouchListener() {
			public boolean onTouch(View v, MotionEvent event) {
				tapGestureDetectorOffer.onTouchEvent(event);
				return false;
			}
		});

		mPagerMen.setOnTouchListener(new OnTouchListener() {
			public boolean onTouch(View v, MotionEvent event) {
				tapGestureDetectorMen.onTouchEvent(event);
				return false;
			}
		});

		mPagerWomen.setOnTouchListener(new OnTouchListener() {
			public boolean onTouch(View v, MotionEvent event) {
				tapGestureDetectorWomen.onTouchEvent(event);
				return false;
			}
		});

		return rootView;
	}

	@Override
	public void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);

		outState.putParcelableArrayList("menCategories", menCategories);
		outState.putParcelableArrayList("womenCategories", womenCategories);
		outState.putParcelableArrayList("offer", offers);
	}

	private void makeRequestCategories() {

		JsonArrayRequest request = new JsonArrayRequest(ServerUrl.BASE_URL
				+ ServerUrl.GET_ALL_CATEGORIES, new Listener<JSONArray>() {
			public void onResponse(JSONArray response) {
				try {
					JSONObject obj = response.getJSONObject(0);
					JSONArray array = (JSONArray) obj.get("categories");
					for (int i = 0; i < array.length(); i++) {
						obj = array.getJSONObject(i);
						Category cat = new Category();
						cat.setId(obj.getString("cat_id"));
						cat.setName(obj.getString("cat_name"));
						cat.setMain_cat(obj.getString("cat_main_cat"));
						cat.setLower_price(obj.getString("cat_lowest_price"));
						cat.setUrl_pic(obj.getString("pic_url"));
						if (cat.getMain_cat().matches("Men")) {
							menCategories.add(cat);
						} else {
							womenCategories.add(cat);
						}
					}

				} catch (JSONException e) {
					e.printStackTrace();
				}
				// Intent i = new Intent(SplashScreen.this, MainActivity.class);
				// i.putParcelableArrayListExtra("men", menCategories);
				// i.putParcelableArrayListExtra("women", womenCategories);
				//
				// startActivity(i);
				// finish();
				makeRequestOffer();
			}
		}, new Response.ErrorListener() {
			@Override
			public void onErrorResponse(VolleyError error) {
				VolleyLog.d("VOLLEY_ERROR", "Error: " + error.getMessage());
				AlertDialog.Builder builder = new AlertDialog.Builder(
						SplashScreen.this);
				builder.setMessage(
						getResources().getString(R.string.error_loading))
						.setCancelable(false)
						.setPositiveButton("OK",
								new DialogInterface.OnClickListener() {
									public void onClick(DialogInterface dialog,
											int id) {
										getActivity().finish();
									}
								});
				AlertDialog alert = builder.create();
				alert.show();
			}
		});

		AppController.getInstance().addToRequestQueue(request);
	}

	private void makeRequestOffer() {

		JsonArrayRequest request = new JsonArrayRequest(ServerUrl.BASE_URL
				+ ServerUrl.GET_OFFER_PRODUCT, new Listener<JSONArray>() {
			public void onResponse(JSONArray response) {
				try {
					JSONObject obj = response.getJSONObject(0);
					JSONArray array = (JSONArray) obj.get("products");
					for (int i = 0; i < array.length(); i++) {
						obj = array.getJSONObject(i);
						Product prod = new Product();
						prod.setId(obj.getString("prod_id"));
						prod.setName(obj.getString("prod_name"));
						prod.setDescription(obj.getString("prod_desc"));
						prod.setDetails(obj.getString("prod_detail"));
						prod.setPrice(obj.getInt("prod_price"));
						if (obj.getString("prod_offer") == "1") {
							prod.setPromoted(true);
						} else {
							prod.setPromoted(false);
						}
						prod.setUrl_pic(obj.getString("pic_url"));
						offers.add(prod);
					}

				} catch (JSONException e) {
					e.printStackTrace();
				}


				startActivity(i);
			}
		}, new Response.ErrorListener() {
			@Override
			public void onErrorResponse(VolleyError error) {
				VolleyLog.d("VOLLEY_ERROR", "Error: " + error.getMessage());
				AlertDialog.Builder builder = new AlertDialog.Builder(
						getActivity());
				builder.setMessage(
						getResources().getString(R.string.error_loading))
						.setCancelable(false)
						.setPositiveButton("OK",
								new DialogInterface.OnClickListener() {
									public void onClick(DialogInterface dialog,
											int id) {
										getActivity().finish();
									}
								});
				AlertDialog alert = builder.create();
				alert.show();
			}
		});

		AppController.getInstance().addToRequestQueue(request);
	}

}
